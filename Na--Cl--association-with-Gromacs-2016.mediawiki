= GROMACS Tutorial: Molecular Dynamics of Na<sup>+</sup>/Cl<sup>-</sup> Association =

by Karl Debiec and Alex DeGrave

Updated with WESTPA version 1.0 beta and Gromacs 2016.3

== Overview ==

Requirements: ~1 hr wallclock time on an 8-core Intel Westmere node (one walker per core); ~1.2 GB disk space

In this tutorial we will use the steady-state weighted ensemble approach to simulate Na<sup>+</sup>/Cl<sup>-</sup> association in Generalized Born implicit solvent. The system consists of single Na<sup>+</sup> and Cl<sup>-</sup> ions modeled with the [http://mackerell.umaryland.edu/charmm_ff.shtml CHARMM force field], using the distance between the two ions as the progress coordinate. [http://www.gromacs.org Gromacs] will be used to run the molecular dynamics, and familiarity with it is a prerequisite (see [http://www.gromacs.org/Documentation/Tutorials tutorials]). Basic knowledge of python and bash scripting is also necessary.

The first step is to set up a directory containing the necessary Gromacs and WESTPA files. A working example directory can be found at <code>westpa/lib/examples/nacl_gmx</code>.

== Preparing the Gromacs files ==

{|
! Input File
! Description
|-
| nacl.top
| topology
|-
| nacl.tpr
| binary topology
|-
| md-genvel.mdp
| configuration for initial segments
|-
| md-continue.mdp
| configuration for continuations
|}

The above files are included in the <code>gromacs_config</code> subfolder of the example directory, and should be familiar to Gromacs users. Note that two configuration files are present. <code>md-genvel.mdp</code> is used for initial segments, in which it is necessary to generate initial velocities, and <code>md-continue.mdp</code> is used for continuations, in which velocities are inherited from the parent segment.

=== md-continue.mdp ===

<pre>;   0.5 ps NVT production with Langevin thermostat and GB implicit solvent
#################################### INPUT ####################################
ld_seed     = RAND      ; Use random seed from WESTPA
################################# INTEGRATOR ##################################
integrator  = sd        ; Langevin thermostat
dt          = 0.002     ; Timestep (ps)
nsteps      = 250       ; Simulation duration (timesteps)
nstcomm     = 250       ; Center of mass motion removal interval
comm_mode   = linear    ; Center of mass motion removal mode
################################## ENSEMBLE ###################################
ref_t       = 300       ; System temperature (K)
tau_t       = 2.0       ; Thermostat time constant (ps)
tc_grps     = system    ; Apply thermostat to complete system
############################## IMPLICIT SOLVENT ###############################
implicit_solvent = GBSA ; Generalized Born implicit solvent
gb_algorithm     = HCT  ; Hawkins-Cramer-Truhlar radii calculation
rgbradii         = 0.0  ; Cutoff for Born radii calculation (A)
########################### NONBONDED INTERACTIONS ############################
cutoff_scheme = group   ; Method of managing neighbor lists
pbc           = no      ; Periodic boundary conditions disabled
coulombtype   = cut-off ; Calculate coulomb interactions using cutoff
rcoulomb      = 0.0     ; Coulomb cutoff of infinity
vdw_type      = cut-off ; Calculate van der Waals interactions using cutoff
rvdw          = 0.0     ; Van der Waals cutoff of infinity
rlist         = 0.0     ; Neighbor list cutoff
nstlist       = 0       ; Do not update neighbor list
################################### OUTPUT ####################################
nstlog        = 50      ; Log output interval (timesteps)
nstenergy     = 50      ; Energy output interval (timesteps)
nstcalcenergy = 50      ; Energy calculation interval (timesteps)
nstxout       = 50      ; Trajectory output interval (timesteps)
nstvout       = 50      ; Velocity outout interval (timesteps)
nstfout       = 50      ; Force output interval (timesteps)</pre>
Several settings in this configuration file are important to WESTPA. First is the the segment duration, τ, which is equal to the timestep times the number of steps. The appropriate τ depends on the system and progress coordinate, and for this system we have chosen 0.5 ps. Second is the use of the stochastic Langevin thermostat; WESTPA requires a stochastic element such that trajectories branched from a common point diverge. In order to ensure that this occurs, it is also necessary to set the random seed to a different value for each segment. Setting the random seed based on the time, as is common for brute-force simulations, may cause problems as simulations started simultaneously from the same parent will not diverge.

The analogous <code>md-genvel.mdp</code> differs only in that it does not load velocities from the input file, instead generating them from a Maxwellian distribution.

== Preparing the WESTPA files ==

{|
! Input File
! Description
|-
| env.sh
| set environment variables
|-
| gen_istate.sh
| generate initial states from basis states
|-
| get_pcoord.sh
| calculate progress coordinate for initial states
|-
| west.cfg
| WESTPA configuration
|-
| aux_functions.py
| auxiliary functions for loading atomic coordinates and log files
|-
| runseg.sh
| segment implementation
|-
| post_iter.sh
| post-segment cleanup
|-
| init.sh
| initialize WESTPA
|-
| run.sh
| run WESTPA
|-
| tar_segs.sh
| tar segments
|}

The above files are listed roughly in the order in which it is appropriate to configure them. <code>gen_istate.sh</code>, <code>get_pcoord.sh</code>, <code>runseg.sh</code>, and <code>post_iter.sh</code> are located in the <code>westpa_scripts</code> subfolder.

=== env.sh ===

This script sets environment variables that may be used across the simulation. These include the root directory for WESTPA, the root directory for the simulation, the name for the simulation, and the python executable to use. It also sets the executables for Gromacs; using an environment variable for this purpose makes it easier to transition code to different hardware or test different builds or flags of an MD code without editing multiple files. Finally, it checks whether Gromacs version 4 or 5 is being used, as the names of some commands have changed in version 5.

=== gen_istates.sh ===

This script generates initial states (structures) for the simulation from the basis states (structures) stored in the <code>bstates</code> subfolder. Our system contains a single basis state containing the two ions with a separation of 9.90 Å; this script generates slight variations of this distance in order to obtain a greater variety of starting configurations.

=== get_pcoord.sh ===

This script calculates the progress coordinate from the initial states. Our progress coordinate is the distance between the Na<sup>+</sup> and Cl<sup>-</sup> ions, which we calculate using <code>gmx distance</code>. Note that this script is used only during initial state generation; during production <code>runseg.sh</code> calculates the progress coordinate.

=== west.cfg ===

This file contains the WESTPA configuration, including:
* the binning scheme
* the bin boundaries
* the number fo walkers per bin
* the number of frames to be output per segment
* the number of iterations to run
* the maximum wallclock time
* the locations of various scripts
* the nature of the anticipated output
For this system we use 22 bins as defined by [http://pubs.acs.org/doi/abs/10.1021/ct100626x Zwier, Kaus, and Chong], and 24 walkers per bin. Some optional functions, such as the ability to run a designated script before each iteration, are listed but unused in this tutorial.

=== aux_functions.py ===

This file contains Python functions that will be used by WESTPA to load atomic coordinates and GROMACS log files. This data will then be saved in the main WESTPA data file, west.h5. In addition to the progress coordinate, WESTPA includes the ability to calculate and store auxiliary data as the simulation is run. This is often easier than looping over iterations and segments afterwards. Since our system contains only two atoms, it is reasonable for us to store all coordinate information in the same hdf5 file as the progress coordinate. We will also store the log information including time, energy, and temperature.

=== runseg.sh ===

This script runs individual segments, calculates and outputs their progress coordinates, and outputs auxiliary data. For each iteration and segment it generates a folder, linking to the files necessary for running Gromacs. For the Gromacs configuration file, it uses <code>sed</code> to input a random seed generated by WESTPA. It then runs Gromacs, calculates and outputs the progress coordinate and auxiliary data, and removes files that are no longer needed. As in <code>get_pcoord.sh</code>, the progress coordinate is calculated using <code>gmx distance</code>. The auxiliary coordinate dataset is prepared by using <code>gmx trjconv</code> to convert the trajectory to pdb format, which is processed using shell commands and output to a temporary file, from which it is read by the <code>coord_loader</code> function in <code>aux_functions.py</code>. The auxiliary log data is similarly processed using shell commands and output to a temporary file, from which it is further processed and stored by the <code>log_loader</code> function in <code>aux_functions.py</code>.

=== post_iter.sh ===

This script cleans up after each iteration. WESTPA simulations can generate large numbers of files, potentially conflicting with filesystem restrictions. After each iteration, <code>post_iter.sh</code> moves the segment logs the associated segment logs to a tar file.


=== init.sh ===

This script initializes the WESTPA system. It removes files from previous runs and uses <code>gen_istates.sh</code> and <code>get_pcoord.sh</code> to generate initial states. This is also where the basis states and target states are defined. For this system we define the bound target state as 1.8 Å separation, and the unbound target state as 16.9 Å separation. Once walkers reach the bins containing these values (i.e. our first and final bins), they are recycled. <code>init.sh</code> is also one of two places where we specify the number of walkers per bin, as <code>--segs-per-state</code>.

=== run.sh ===

This script is used to run WESTPA.

=== tar_segs.sh ===

This script is used to tar segments after the WESTPA simulation has been run, in order to reduce the number of files produced. In order to allow extension of the simulation, the last segment is not tarred. Typically, it is advisable not to tar segments after each iteration (i.e. in <code>post_iter.sh</code>), while the main WESTPA process is tarring, other cores are idle, potentially wasting CPU time.

== Running the simulation ==

From the simulation root directory (<code>$WEST_SIM_ROOT</code>), the simulation may be initialized using the command:

<pre>./init.sh</pre>
and run using the command:

<pre>./run.sh</pre>
<code>init.sh</code> and <code>run.sh</code> call <code>w_init</code> and <code>w_run</code> from WESTPA. By default WESTPA will use as many cores as are available on the host machine. If the simulation is run on a computing cluster, <code>w_run</code> may be executed from a batch script. See the running page for more information on how to submit jobs to specific clusters.

== Analyzing the data ==

=== Output ===

{|
! Output File
! Remarks
|-
| traj_segs
| output from each iteration and segment
|-
| seg_logs
| log files from each iteration and segment
|-
| west.h5
| WESTPA output in hdf5 database
|-
| west.log
| WESTPA log file
|}

==== traj_segs ====

This folder stores the results of the WESTPA simulation, organized by iteration and segment. This includes all files generated by <code>runseg.sh</code>, including those generated by Gromacs. For this system, the only files saved are <code>seg.trr</code>, <code>seg.edr</code>, and <code>seg.log</code> corresponding to the coordinates and velocities, energy, and log. After the simulation has been run, <code>tar_segs.sh</code> may be used to reduce each iteration to a single tar file.

==== seg_logs ====

This folder stores logs from each iteration and segment. <code>post_iter.sh</code> has been used to combine each segment into a single tar file.

==== west.h5 ====

This file stores the simulation output in an hdf5 database. This includes the relationships between successive walkers, bin weights, progress coordinates, and auxiliary data.

==== west.log ====

This file contains a brief log of simulation progress. As WESTPA runs, it outputs information such as the current iteration number, the number of populated bins, and the time needed for each iteration in this log. This is also where errors are output.

Since only 10 iterations have been run, we do not yet have enough data to analyze. Edit <code>west.cfg</code> and change <code>max_total_iterations</code> to 100. Extend using the command:

<pre>./run.sh</pre>

=== Computing the association rate ===

WESTPA includes a variety of tools for analysis, all of which are parallellized and may be run on a single thread, multiple processors, or across multiple nodes on a computing cluster.  WESTPA offers two modalities for analysis: (i) a set of command line tools, each designed for a specific task, and (ii) an automated, all-in-one analysis tool supporting multiple analysis schemes and interactive analyses via an "ipython"-like interface.  In this tutorial, we will use the later option, called <code>w_ipa</code>.

Analysis schemes are defined in the WESTPA configuration file <code>west.cfg</code>.  At the bottom of <code>west.cfg</code>, you should see a section similar to the following:

<pre>
  analysis:
     directory: ANALYSIS                
     kinetics:                          
       step_iter: 10
       evolution: cumulative
       extra: [ 'disable-correl' ]
     analysis_schemes:                  
       TEST:
         enabled: True
         bins:
           - type: RectilinearBinMapper
             boundaries: 
               - [0.0,2.8,15.9,'inf']
         states:
           - label: unbound
             coords: 
               - [15.9] 
           - label: bound
             coords: 
               - [0]
</pre>

The <code>w_ipa</code> tool will analyze the simulation by figuring out which bin each trajectory segment exists in, at each time point. Then the tool will calculate fluxes and estimate rate constants between the states. Options regarding this analysis should be specified in the WESTPA configuration file <code>west.cfg</code>, as exemplified above.  

{|
! Option
! Description
|-
| <code>directory</code>
| Specifies the directory where analysis files are stored  
|-
| <code>analysis_schemes</code>
| Under this subheading, one or more "analysis schemes" may be specified; each analysis scheme comprises a set of analysis parameters. Using multiple analysis schemes is a convenient way to test out the effect of different parameters on your results.
|-
| <code>bins</code>
| Here we specify binning parameters for analysis of the simulation, which may be the same or different from binning parameters used during the course of the weighted ensemble simulation.  Both the type of bin mapper and bin boundaries should be specified.   
|-
| <code>states</code>
| Here we specify states, which are defined as collections of one or more bins.  During the analysis, rate constants and fluxes will be calculated from each state to every other state.  Often times, you may want the states to correpond to a physically meaningful partition of the state space, such as bound and unbound states.  Each state should have a label.  Boundaries of the state are specified using a list of coordinates; each of these coordinates is assigned to a bin, as defined in the <code>bins</code> section of the yaml file, under <code>analysis_schemes</code>.  Each bin to which a coordinate is assigned is then a member of the state being defined.  For example, <code>- [0,1]</code> would specify that all bins including progress coordinates 0 or 1 would be included in the corresponding state.
|-
| <code>kinetics</code>
| Options specific to analyzing the kinetics
|-
| <code>step_iter</code>
| When analyzing and averaging kinetic data, skip ahead in blocks of the specified number of WE iterations.
|-
| <code>evolution</code>
| Specify how to average kinetic data.  Here, we cumulatively average.
|}

Parameters may be specified globally or for each analysis scheme individually.  In the example at hand, the options under the keyword <code>kinetics</code> are applied to every analysis scheme (though here we only have one analysis scheme).  Alternatively, the same options could be specified under each analysis scheme.

To run the analysis, simply run <code>w_ipa</code> from the simulation directory.  <code>w_ipa</code> will automatically perform analyses that need to be performed or load up the analysis files if they have already been completed.  After running the analyses, <code>w_ipa</code> will drop you to an <code>ipython</code>-like interactive python interpreter.  From here, you have access to WESTPA datasets and a variety of analysis routines through the <code>w</code> object.

We can plot the cumulatively averaged flux into the bound state using the built-in terminal-based plotter of <code>w_ipa</code>.  First, we will check what state index should be passed to the plotting function.  To check the state labels and their corresponding indices, type the following command:

<pre>
In [1]: w.state_labels

Out [1]:
State labels and definitions!
0: bound
1: unbound
2: Unknown
</pre>

We can see that the bound state corresponds to index 0.  Therefore, to plot the flux into the bound state, type:

<pre>
w.current.direct.target_flux_evolution.plot(0)
</pre>

[[_static/nacl_gromacs_flux_evolution_terminal.png]]

The x-axis represents the iteration number, and the y-axis represents the flux into the bound state in units of τ<sup>-1</sup>.  

Alternatively, we can plot the flux into the bound state using <code>pyplot</code>:

<pre>
import matplotlib.pyplot as pyplot
pyplot.plot(w.direct['target_flux_evolution']['expected'][:,0], color='black')
pyplot.plot(w.direct['target_flux_evolution']['ci_lbound'][:,0], color='gray')
pyplot.plot(w.direct['target_flux_evolution']['ci_ubound'][:,0], color='gray')
pyplot.xlabel('Iteration')
pyplot.ylabel(u'Mean Flux (1/\u03c4)')
pyplot.show()
</pre>

[[_static/nacl_gromacs_flux_evolution_pyplot.png]]

We can see that the flux has plateaued, indicating that the simulation has reached steady-state conditions.  When calculating the rate, we discard the portion of data during which the system is equilibrating, using only the portion over which the rates are steady and converging.  We may calculate the rate using only the last 50 iterations. To do so, exit <code>w_ipa</code> and add another line to <code>west.cfg</code>, under the <code>kinetics</code> section of <code>analysis</code>:

<pre>
     kinetics:                          
       step_iter: 10
       first_iter: 50 ##<<< add this to start the analysis at iteration 50. 
       evolution: cumulative
       extra: [ 'disable-correl' ]
</pre>

Then run <code>w_ipa</code> again.  To see the final flux into the bound state, type the following from the <code>w_ipa</code> interactive interpreter:

<pre>
In [1]: w.current.direct.target_flux_evolution

Out [1]:
target_flux_evolution data:
bound: mean=1.466026797833245e-02 CI=(1.286366529600176e-02, 1.656786609100170e-02) * tau^-1
unbound  : mean=1.291222773983755e-01 CI=(1.224936915710897e-01, 1.350780659287130e-01) * tau^-1
To access data, index via the following names:
['ci_lbound', 'ci_ubound', 'corr_len', 'error', 'expected', 'iter_start', 'iter_stop', 'name', 'plot', 'raw', 'sterr']
</pre>

Your output should be within an order of magnitude.  Since τ for our simulation was 0.5ps, in order to determine the association rate in units of ps<sup>-1</sup>, the flux should be multiplied by 2, giving an association rate of 2.9×10<sup>-2</sup> ps<sup>-1</sup> with a 95% CI of 2.6×10<sup>-2</sup> ps<sup>-1</sup> to 3.3×10<sup>-2</sup> ps<sup>-1</sup>. In order to obtain a more precise association rate constant, we could try running more iterations of the simulation, which may be done by editing west.cfg.


=== Visualizing a selected pathway ===

The tool <code>w_ipa</code> also includes methods to make concatenating segments for one of your completed pathways straightforward.  If it is not already open, run <code>w_ipa</code>. From the prompt, type the following:

<pre>
s = w.current.successful_trajectories
s[(2,0)]
</pre>.

This will return a list of the segment indices for each segment that successfully transitioned from the initial state to the bound state.  You can check the state labels by typing <code>w.state_labels</code> from the <code>w_ipa</code> prompt.  Here, the initial state is 'Unknown' because we did not give it a state label in the file <code>west.cfg</code>.

Next, trace the trajectory's history using the method <code>w.trace</code>. For example, if segment 476 was successful, type <code>t = w.trace(476)</code>.

Using atomic coordinates stored in <code>west.h5</code>, we can generate a complete trajectory viewable using [http://www.ks.uiuc.edu/Research/vmd Visual Molecular Dynamics]. To do so, we may use the module <code>utils.py</code>, included in the example simulation directory:

<pre>#!/usr/bin/env python
import numpy

class TrajWriter(object):
    '''
    A class for writing out trajectory traces as an xyz file, for subsequent
    visualization.
    '''
    def __init__(self, trace, w, filename='trace.xyz'):
        self.trace = trace
        self.w = w
        self.filename = filename
        self._write()

    def _get_coords(self, iteration, seg_id):
        self.w.iteration = iteration
        coords = self.w.current.auxdata['coord'][seg_id]
        return coords

    def _write(self):
        all_coords = []
        starting_iteration = self.w.iteration 
        for i, iteration in enumerate(self.trace.iteration):
            seg_id = self.trace.seg_id[i]
            coords = self._get_coords(iteration, seg_id)
            # The last timepoint of one iteration is the same as the first
            # timepoint of the last, so skip the last timepoint of each 
            # iteration
            coords = coords[:-1]
            all_coords.append(coords)
        self.w.iteration = starting_iteration
        all_coords = numpy.concatenate(all_coords)
        with open(self.filename, 'w') as outfile:
            for i, frame in enumerate(all_coords):
                outfile.write("2\n")
                outfile.write("{0}\n".format(i))
                outfile.write("SOD {0:9.5f} {1:9.5f} {2:9.5f}\n".format(
                  float(frame[0,0]), float(frame[0,1]), float(frame[0,2])))
                outfile.write("CLA {0:9.5f} {1:9.5f} {2:9.5f}\n".format(
                  float(frame[1,0]), float(frame[1,1]), float(frame[1,2])))
</pre>

Load this module into <code>w_ipa</code> by typing <code>from utils import TrajWriter</code> at the interactive prompt. Then type <code>TrajWriter(t,w)</code> to write the trajectory to a file named <code>trace.xyz</code>.
------------
== Useful links ==

* [http://www.gromacs.org Official GROMACS web page]
* [http://www.gromacs.org/documentation/tutorials GROMACS tutorials from the official web page]
* [http://www.ks.uiuc.edu/Research/vmd Official VMD web page]

== Useful hints ==

- Make sure your paths are set correctly in env.sh` - If the simulation doesn't stop properly with CTRL+C , use CTRL+Z. - Another method to stop the simulation relatively cleanly is to rename <code>runseg.sh</code>; WESTPA will shut the simulation down and prevent the hdf5 file from becoming corrupted. Some extra steps may be necessary to ensure that the analysis scripts can be run successfully.

== References ==

* Zwier, MC, Kaus, JW, Chong, LT. Efficient Explicit-Solvent Molecular
Dynamics Simulations of Molecular Association Kinetics: Methane/Methane,
Na+/Cl−, Methane/Benzene, and K+/18-Crown-6 Ether. J Chem Theory Comput.
2011. http://pubs.acs.org/doi/abs/10.1021/ct100626x
